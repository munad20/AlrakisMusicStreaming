{"remainingRequest":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/babel-loader/lib/index.js!/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/src/flask/flaskPlaylist.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/src/flask/flaskPlaylist.vue","mtime":1635625337318},{"path":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/babel.config.js","mtime":1635410593602},{"path":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/cache-loader/dist/cjs.js","mtime":1635410651407},{"path":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/babel-loader/lib/index.js","mtime":1635410651687},{"path":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/cache-loader/dist/cjs.js","mtime":1635410651407},{"path":"/Users/muhamadsdu/Desktop/Semester 3/semesterprojekt/template/node_modules/vue-loader/lib/index.js","mtime":1635410651757}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvbXVoYW1hZHNkdS9EZXNrdG9wL1NlbWVzdGVyIDMvc2VtZXN0ZXJwcm9qZWt0L3RlbXBsYXRlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvbXVoYW1hZHNkdS9EZXNrdG9wL1NlbWVzdGVyIDMvc2VtZXN0ZXJwcm9qZWt0L3RlbXBsYXRlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gIkAvZmxhc2svZmxhc2tQbGF5bGlzdCI7CnZhciBiYXNlVVJMID0gImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiZmxhc2tQbGF5bGlzdCIsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHBvc3RJZDogW10sCiAgICAgIGZsYXNrTmFtZTogIiIsCiAgICAgIGZsYXNrVGVzdHM6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGZldGNoKGJhc2VVUkwpLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByLmpzb24oKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZmxhc2tUZXN0cyA9IGo7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBwb3N0OiBmdW5jdGlvbiBwb3N0KCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciByZXF1ZXN0T3B0aW9uczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgIlNvbmdOYW1lIjogImZsYXNrVGVzdHMiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogInZ1ZVBvc3RFeGFtcGxlIgogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGZldGNoKCJodHRwOi8vbG9jYWxob3N0OjUwMDAiLCByZXF1ZXN0T3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCk7CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIucG9zdElkID0gZGF0YS5pZDsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZGRGbGFza1Rlc3Q6IGZ1bmN0aW9uIGFkZEZsYXNrVGVzdCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdChiYXNlVVJMLCB7CiAgICAgICAgICAgICAgICAgIG5hbWU6IF90aGlzMy5mbGFza05hbWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIF90aGlzMy5mbGFza1Rlc3RzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfdGhpczMuZmxhc2tUZXN0cyksIFtyZXMuZGF0YV0pOwogICAgICAgICAgICAgICAgX3RoaXMzLmZsYXNrTmFtZSA9ICIiOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["flaskPlaylist.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAkBA,OAAA,KAAA,MAAA,uBAAA;AACA,IAAA,OAAA,GAAA,uBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA,EAFA;AAGA,MAAA,UAAA,EAAA;AAHA,KAAA;AAKA,GARA;AASA,EAAA,OATA,qBASA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,uBAAA,CAAA,CAAA,IAAA,EAAA;AAAA,eAAA,EAAA,IAAA,CAAA,UAAA,CAAA;AAAA,uBAAA,KAAA,CAAA,UAAA,GAAA,CAAA;AAAA,eAAA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,GAXA;AAWA,EAAA,IAXA,kBAWA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAA;AACA,gBAAA,cADA,GACA;AACA,kBAAA,MAAA,EAAA,MADA;AAEA,kBAAA,OAAA,EAAA;AAAA,gCAAA;AAAA,mBAFA;AAGA,kBAAA,IAAA,EAAA,IAAA,CAAA,SAAA,CAAA;AAAA,oBAAA,KAAA,EAAA;AAAA,mBAAA;AAHA,iBADA;AAMA,gBAAA,KAAA,CAAA,uBAAA,EAAA,cAAA,CAAA,CACA,IADA,CACA,UAAA,QAAA;AAAA,yBAAA,QAAA,EAAA;AAAA,iBADA,EAEA,IAFA,CAEA,UAAA,IAAA;AAAA,yBAAA,MAAA,CAAA,MAAA,GAAA,IAAA,CAAA,EAAA;AAAA,iBAFA;AAGA,eATA,CASA,OAAA,CAAA,EACA;AACA,gBAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AACA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,GAzBA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,kBAAA,IAAA,EAAA,MAAA,CAAA;AAAA,iBAAA,CADA;;AAAA;AACA,gBAAA,GADA;AAGA,gBAAA,MAAA,CAAA,UAAA,gCAAA,MAAA,CAAA,UAAA,IAAA,GAAA,CAAA,IAAA;AACA,gBAAA,MAAA,CAAA,SAAA,GAAA,EAAA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAPA;AA1BA,CAAA","sourcesContent":["<template>\n  <div id=\"flaskPlaylist\">\n    <ul>\n      <li class=\"row\" v-for=\"post in flaskTests\" :key=\"post\">\n        <div class=\"column\">\n          <span>{{post.SongName}}</span>\n        </div>\n        <div class=\"column\">\n         <span>{{post.Artist}}</span>\n        </div>\n        <div class=\"column\">\n          <span>{{post.Album}}</span>\n        </div>\n      </li>\n    </ul>\n  </div>\n</template>\n<script>\nimport axios from \"@/flask/flaskPlaylist\";\nconst baseURL = \"http://localhost:5000\"\n\nexport default {\n  name: \"flaskPlaylist\",\n  data() {\n    return {\n      postId:[],\n      flaskName: \"\",\n      flaskTests: []\n    };\n  },\n  async created(){\n    fetch(baseURL).then((r)=>r.json()).then((j)=>this.flaskTests=j)\n  },  async post(){\n    try {\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\"SongName\": \"flaskTests\"},\n        body: JSON.stringify({title: \"vuePostExample\"})\n      };\n      fetch(\"http://localhost:5000\", requestOptions)\n      .then(response => response())\n      .then(data => (this.postId = data.id))\n    } catch (e)\n    {\n      console.error(e);\n    }\n  },\n  methods: {\n    async addFlaskTest()\n    {\n      const res = await  axios.post(baseURL, {name: this.flaskName});\n\n      this.flaskTests = [...this.flaskTests, res.data];\n      this.flaskName = \"\";\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n\n}\n\n.column {\n  float: left;\n  width: 20%;\n  padding: 5%;\n  margin-bottom: -7%;\n\n}\n\nli{\n  list-style-type: none;\n}\n\n\n</style>\n"],"sourceRoot":"src/flask"}]}